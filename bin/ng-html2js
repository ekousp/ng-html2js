#!/usr/bin/env node

var fs = require('fs');
var optimist = require('optimist');
var path = require('path');

var html2js = require('../src/html2js');
var minify = require('html-minifier').minify;


//
// Setup usage and parse arguments
//

var argv = optimist.usage('Usage: $0 <input file> <output file>')
  // -m, --module option
  .alias('m', 'module')
  .string('m')
  .describe('m', 'If module name is provided, template will be packaged under this module.')
  // --module-var option
  .string('module-var')
  .describe('module-var', '--module-var is to be used with --module. If module-var is provided, it will pass module-var to immediately-invoked function expression (IIFE). Its default value is "module".')
  // -b, --basedir option
  .alias('b', 'basedir')
  .string('b')
  .describe('b', 'If basedir is provided, basedir will be removed from the templates\' path.')
  // -p, --prefix option
  .alias('p', 'prefix')
  .string('p')
  .describe('p', 'If prefix is provided, the path in the generated-js will be prefixed')
  // -s, --minify
  .alias('s', 'minify')
  .boolean('s')
  .describe('s', 'minify the html first before convert to js')
  // -h, --help option
  .alias('h', 'help')
  .boolean('h')
  .describe('h', 'Shows usage message; what you are looking at.')
  .argv;

if (argv._.length === 0 || argv.help) {
  console.log(optimist.help());
  process.exit();
}

var inputFile = argv._[0];
var outputFile = argv._[1];
var moduleName = argv.m;
var moduleVar = argv['module-var'];
var baseDir = argv.b;
var prefix = argv.p;
var htmlMinfiy = argv.s;

//
// Main script
//

var content = fs.readFileSync(inputFile, 'utf8');
if (htmlMinfiy) {
  content = minify(content, {
    removeComments: true,
    collapseWhitespace: true
  });
}

var inputAlias = path.normalize(inputFile);
if (baseDir) {
  inputAlias = inputAlias.replace(path.normalize(baseDir), '');
}
if (prefix) {
  inputAlias = path.normalize(path.join(prefix, inputAlias));
}
inputAlias = inputAlias.replace(/\\/g, '/');
var output = html2js(inputAlias, content, moduleName, moduleVar);

if (outputFile) {
  fs.writeFileSync(outputFile, output, 'utf8');
} else {
  console.log(output);
}

